---
title: "Plotting variable importance"
author: "Wesley Rancher"
date: "2025-07-07"
date-modified: last-modified
categories: [tidymodels, pdp, vip, randomForest]
title-block-banner: false
title-block-banner-color: white
---

```{r, eval = FALSE}
library(pdp)
library(tidymodels)
library(randomForest)
library(vip)
library(tidytext)
```

Model fits obtained from model_fitting.Rmd

```{r, eval = FALSE}
model_files <- list.files("models/", full.names = TRUE)

models <- setNames(
  lapply(model_files, readRDS),
  tools::file_path_sans_ext(basename(model_files))
)

#palette
colors <- c("Alaskan birch" = "#67161CFF","Black spruce" = "#3F6148FF",
            "White spruce" = "#A4804CFF","Trembling aspen" = "#4B5F80FF")

training_df_imputed <- read.csv("data/processed/csv/training_df_imputed.csv")
```

Partial dependence on most important variables

```{r, eval = FALSE}
#iterate over each model and plot partial dependence
pdp_lines <- list()
vip_all_spp <- list()

for (spp in names(models)) {
  model <- models[[spp]]
  fit <- extract_fit_parsnip(model)
  recipe <- extract_recipe(model)
  
  #cleaned predictor variables
  training_data <- training_df_imputed %>% filter(Species == gsub("final_fit_", "", spp) %>% gsub("_", " ", .))
  training_data <- training_data %>%
    mutate(across(where(is.integer), as.numeric))
  predictors <- bake(recipe, new_data = training_data) %>% as.data.frame()#apply tidymodel preprocessing steps
  
  #conditional renaming for two species
  if (spp == paste0("final_fit_quaking_aspen")){
    spp <- paste0("final_fit_trembling_aspen")
    }
  if (spp == paste0("final_fit_resin_birch")){
    spp <- paste0("final_fit_alaskan_birch")
    }
  
  #variable importance
  vip <- vi(fit)
  vip$Species <- tools::toTitleCase(strsplit(spp, "_")[[1]][3])%>%
    paste0(" ", strsplit(spp, "_")[[1]][4])
  vip_all_spp[[spp]] <- vip
  
  #partial dependence results
  # pdp_res <- pdp::partial(
  #   object = fit$fit,
  #   pred.var = "evi_summer",
  #   train = predictors,
  #   type = "regression"
  # )
  # 
  # pdp_res$Species <- tools::toTitleCase(strsplit(spp, "_")[[1]][3])%>%
  #   paste0(" ", strsplit(spp, "_")[[1]][4])
  # pdp_lines[[spp]] <- pdp_res
}

pdp_df <- bind_rows(pdp_lines)
vip_df <- bind_rows(vip_all_spp)

pdp_df <- pdp_df %>%
  mutate(Species = factor(Species, levels = c("Black spruce", "White spruce", 
                                              "Alaskan birch", "Trembling aspen")))
vip_df <- vip_df %>%
  mutate(Species = factor(Species, levels = c("Black spruce", "White spruce", 
                                              "Alaskan birch", "Trembling aspen")))
```

Plotting variable importance and partial dependence

```{r, eval = FALSE}
importance_plot <- vip_df%>%
    group_by(Species) %>%
    slice_max(order_by = Importance, n = 10, with_ties = FALSE) %>%
    ungroup() %>%
    mutate(Variable = reorder_within(Variable, Importance, Species))%>%
    ggplot(aes(x=Importance, y=Variable, fill=Species))+
    geom_bar(stat="identity")+
    scale_fill_manual(values=colors)+
    scale_y_reordered()+
    facet_wrap(~Species, scales = "free")+
    theme_bw(base_family = "Times New Roman")+
    labs(x="Variable importance")+
    theme(axis.text = element_text(color = "black", size = 14),
          #axis.text.x = element_blank(),
          plot.title = element_text(color = "black", size = 20),
          axis.title.y = element_blank(),
          axis.title.x = element_text(color = "black", size = 18),
          strip.text = element_text(color = "black", size = 16),
          legend.position = "none",
          panel.grid.major = element_line(color = "gray20", linewidth = .25),
          panel.grid.minor = element_blank())
importance_plot

#visualize pdp
ggplot(pdp_df, aes(x = evi_summer, y = yhat, color = Species)) +
  geom_line(size = 1) +
  #facet_grid(~Species)+
  scale_color_manual(values=colors)+
  labs(
    x = "Summer Enhanced Vegetation Index (Normalized)",
    y = "Predicted Biomass (g/mÂ²)"
  ) +
  theme_minimal(base_family = "Times New Roman")
```

```{r, eval = FALSE}
png("results/graphs/variable_importance.png", width = 9.5, height = 6, units = "in", res = 300)
print(importance_plot)
dev.off()
```

![](images/clipboard-3753814610.png)
